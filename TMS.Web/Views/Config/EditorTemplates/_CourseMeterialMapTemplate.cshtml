@model TMS.Library.Entities.Common.Configuration.CourseMeterialsMapping
@using lr = Resources.Resources
<div class="Alertbox alert alert-danger" style="display:none">
    <ul class="errors"></ul>
</div>
<input type="hidden" id="modelid" value="@Model.ID">
<div class="form-horizontal form-person-popup">
    <div class="form-group">
        @Html.LabelFor(model => model.CourseMaterialID, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().DropDownListFor(m => m.CourseMaterialID)
            .HtmlAttributes(new { style = "width:100%" })
            .DataTextField("Text")
            .DataValueField("Value").Filter(Kendo.Mvc.UI.FilterType.Contains)
            .OptionLabel(lr.CourseMaterialsTitle)
                    .DataSource(dataSource => { dataSource.Read(read => read.Action("CourseMeterial", "DDL").Data("filterrelateditems")); }))
            @Html.ValidationMessageFor(model => model.CourseMaterialID)
        </div>
    </div>
</div>










@*@(Html.Kendo().Grid<TMS.Library.Entities.Common.Configuration.CourseMeterialsMapping>()
                .Name("TraineePersons")
          .Columns(columns =>
          {

              columns.Select().Width(50).HeaderTemplate("");
              columns.Bound(e => e.PrimaryMaterial).Title(lr.CourseLogisticRequirementsTitle).ClientTemplate("#=PrimaryMaterial#");
              columns.Bound(e => e.AddedByAlias).ClientTemplate("#=addedbytemplate(data)#").Width(190).MinScreenWidth(550).Title(lr.GridAddedBy);
          })
            .Sortable()
           .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
           .PersistSelection()
            //.Events(ev => ev.Change("onChange"))
            .Events(e => e.Edit("Grid_onEdit").Save("General_onSave").Change("onTraineePersonsChange"))
            .Pageable(pager => pager.Refresh(true)).Scrollable().Filterable()
            .HtmlAttributes(new { style = "height:550px;" }).DataSource(dataSource =>
            dataSource.Ajax()
            .Model(model =>
            {
                model.Id(p => p.ID);
                //model.Field(p => p.ID).Editable(false);
            }
            )
    .PageSize(10)
    .Read(read => read.Action("ManageCourseMeterial_Read", "Config"))
    .Events(e => e.Error("GeneralErrorHandler(\"TraineePersons\")").RequestEnd("GridRequestEndUpdate"))
            ).NoRecords(lr.GridNoRecordFoundMessage)
    )*@
