
@using lr = Resources.Resources;
@model long
<script type="text/javascript">

    var personids;
    function CreateTrainerAdditionalData() {
        return {
            oid: '@Model'
        }
    }
</script>


<div class="ChildGrid">
    @(Html.Kendo().Grid<TMS.Library.Entities.Common.Configuration.CourseLogisticRequirementsMapping>()
            .Name("ManageCourseMap" + Model)
      .Columns(columns =>
      {
          columns.Bound(e => e.PrimaryRequirementName).Title(lr.CourseLogisticRequirementsTitle);
          columns.Bound(e => e.AddedByAlias).ClientTemplate("#=addedbytemplate(data)#").Width(190).MinScreenWidth(550).Title(lr.GridAddedBy);
          columns.Bound(e => e.UpdatedByAlias).Width(170).Title(lr.ModifiedBy).
      ClientTemplate(@"<div class='gridupdated'> # if (UpdatedByAlias!=null) { #" + @"<span class='Addedby'>#=UpdatedByAlias# </span>
    <span class='date' >#=kendo.toString(UpdatedDate,'" + DateFormatScript + @"')#</span>
<span class='time' >#=kendo.toString(UpdatedDate,'" + TimeFormatScript + @"')#</span>
" + @"#} else {#<div>Not Modified</div> </div>#}#");
      }).Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_CourseLogisticMapTemplate").DisplayDeleteConfirmation(false))
                    .ToolBar(toolbar => toolbar.Template(@<text> @RenderAddTemplate()</text>))
        .Sortable().Selectable(selectable => selectable
        .Mode(GridSelectionMode.Multiple))
        .Pageable(pager => pager.Refresh(true)).Scrollable().Filterable().Events(e => e.Edit("Grid_onEdit").Save("General_onSave"))
        .HtmlAttributes(new { style = "height:350px;" }).DataSource(dataSource => dataSource.Ajax().Model(model => { model.Id(m => m.ID); }).PageSize(8)
        .Read(read => read.Action("ManageCourseMap_Read", "Config", new { CourseID = Model }))
        .Create(read => read.Action("ManageLogisticMap_Create", "Config")
        .Data("CreateTrainerAdditionalData"))
        //.Update(read => read.Action("MManageCourseMeterialMap_Update", "Config"))
        .Destroy(read => read.Action("ManageLogisticMap_Destroy", "Config"))
        .Events(e => e.Error("GeneralErrorHandler(\"ManageCourseMap" + Model + "\")").RequestEnd("GridRequestEndUpdate"))
                        ).NoRecords(lr.GridNoRecordFoundMessage)
    )

    @helper RenderAddTemplate()
    {
    <div class="toolbar">
        @if (User.IsInAnyRoles("CanAddEditProgramTrainer"))
        {
            <a class="k-button tms-grid-add"><span class="tms-grid-icon mdi mdi-plus "></span></a>
            @*<a class="k-button tms-grid-edit"><span class="tms-grid-icon mdi mdi-pencil "></span></a>*@
        }
        @if (User.IsInAnyRoles("CanDeleteProgramTrainer"))
        {
            <a class="k-button tms-grid-destroy"><span class="tms-grid-icon mdi mdi-delete "></span></a>
        }
    </div>

}
</div>










@*<script type="text/javascript">
   
    function CreateTrainerAdditionalData() {
        return {
            oid: '@Model'
        }
    }
</script>
<div class="ChildGrid">
    @(Html.Kendo().Grid<TMS.Library.Entities.Common.Configuration.CourseLogisticRequirementsMapping>()
            .Name("ManageCourseMap" + Model)
     .Columns(columns =>
     {
         ////columns.Bound(e => e.CourseLogisticRequirementID).Title(lr.CourseLogisticRequirementsTitle);
         columns.Bound(e => e.PrimaryRequirementName).Title(lr.CourseLogisticRequirementsTitle);
         columns.Bound(e => e.AddedByAlias).ClientTemplate("#=addedbytemplate(data)#").Width(190).MinScreenWidth(550).Title(lr.GridAddedBy);

     }).Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_CourseLogisticMapTemplate").DisplayDeleteConfirmation(false))
                     .ToolBar(toolbar => toolbar.Template(@<text> @RenderAddTemplate()</text>))
                              .Sortable().Selectable(selectable => selectable
                                                                    .Mode(GridSelectionMode.Multiple))
                  .Pageable(pager => pager
               .Refresh(true))
             .Scrollable().Filterable()
                                             .Events(e => e.Edit("Grid_onEdit").Save("General_onSave"))
            .HtmlAttributes(new { style = "height:350px;" })
               .DataSource(dataSource => dataSource
                      .Ajax()
                           .Model(model =>
                           {
                               model.Id(m => m.ID);
                           })

            .PageSize(8)
                                .Read(read => read.Action("ManageCourseMap_Read", "Config", new { CourseID = Model }))
                .Create(read => read.Action("ManageLogisticMap_Create", "Config").Data("CreateTrainerAdditionalData"))
                         .Destroy(read => read.Action("ManageLogisticMap_Destroy", "Config"))
        .Events(e => e.Error("GeneralErrorHandler(\"ManageCourseMap" + Model + "\")"))
                        ).NoRecords(lr.GridNoRecordFoundMessage)
    )



  
    @helper RenderAddTemplate()
    {
    <div class="toolbar">
        @if (User.IsInAnyRoles("CanAddEditProgramTrainer"))
        {
            <a class="k-button tms-grid-add"><span class="tms-grid-icon mdi mdi-plus "></span></a>
            <a class="k-button tms-grid-edit"><span class="tms-grid-icon mdi mdi-pencil "></span></a>
        }
        @if (User.IsInAnyRoles("CanDeleteProgramTrainer"))
        {
            <a class="k-button tms-grid-destroy"><span class="tms-grid-icon mdi mdi-delete "></span></a>
        }
    </div>

}
</div>*@

@*.Data("CreateTrainerAdditionalData")*@