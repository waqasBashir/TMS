@model TMS.Library.TMS.Persons.Person
@using lr = Resources.Resources
@using TMS.Library

@{

    var PrimaryLanguageName = TMS.TMSHelper.PrimaryLangName();
    var PrimaryLanguageFlag = TMS.TMSHelper.PrimaryLangFlag();
    var SecondaryLanguageName = TMS.TMSHelper.SecondaryLangName();
    var SecondaryLanguageFlag = TMS.TMSHelper.SecondaryLangFlag();
}
<script>
    function onDOBChange(e) {
        var dt = e.sender;
        var value = dt.value();

        if (value === null) {
            value = kendo.parseDate(dt.element.val(), dt.options.parseFormats);
        }

        if (value < dt.min()) {
            dt.value(dt.min());
        } else if (value > dt.max()) {
            dt.value(dt.max());
        }
    }
    //jQuery(".country_Code").ready(function () {
    //    jQuery(".country_Code").val(134);
    //})
</script>
<div class="Alertbox alert alert-danger" style="display:none">
    <ul class="errors"></ul>
</div>
<div class="form-horizontal form-person-popup">

    <div id="personeditdiv">
        <div class="form-group">
            @Html.LabelFor(model => model.PersonRegCode, new { @class = "col-md-3 col-lg-3 control-label" })
            <div class="col-md-7 col-lg-7 col-sm-11">
                @Html.Kendo().TextBoxFor(model => model.PersonRegCode).HtmlAttributes(new { @class = "form-control ", @disabled = "disabled", @style = " width: 100%;" })
            </div>
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.SalutationID, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().DropDownListFor(c => c.SalutationID).DataTextField("Text").DataValueField("Value")
            .OptionLabel(lr.SalutationOptionalLabel)
            //  .OptionLabel(new { Text = lr.SalutationOptionalLabel, Value = 0 })
            .HtmlAttributes(new { @class = "form-control txtrequired ", style = "width:100%", })
                                .BindTo(TMS.Extensions.EnumToSelectList<TMS.Library.Salutation>(typeof(TMS.Library.Salutation))).Events(e => e.Change("SalutationChange")))

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Gender, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().DropDownListFor(c => c.Gender).DataTextField("Text").DataValueField("Value")
            .OptionLabel(lr.GenderOptionallabel)
            // .OptionLabel(new { Text = lr.GenderOptionallabel, Value = 0 })
            .HtmlAttributes(new { @class = "form-control txtrequired ", style = "width:100%" })
                                   .BindTo(TMS.Extensions.EnumToSelectList<TMS.Library.Gender>(typeof(TMS.Library.Gender))))

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.P_FirstName, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.P_FirstName).HtmlAttributes(new { @class = "form-control pfirstname txtrequired", @placeholder = lr.PersonP_FirstName, @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.P_FirstName)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.P_MiddleName, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.P_MiddleName).HtmlAttributes(new { @class = "form-control pmidddlename", @placeholder = lr.PersonP_MiddleName, @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.P_MiddleName)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.P_LastName, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.P_LastName).HtmlAttributes(new { @class = "form-control  plast_name txtrequired", @placeholder = lr.PersonP_LastName, @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.P_LastName)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.NickName, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.NickName).HtmlAttributes(new { @class = "form-control nickname txtrequired", @placeholder = lr.PersonNickName, @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.NickName)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Alias, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.Alias).HtmlAttributes(new { @class = "form-control alias", @placeholder = lr.PersonAlias, @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.Alias)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.P_DisplayName, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.P_DisplayName).HtmlAttributes(new { @class = "form-control pdisplayname ", @placeholder = lr.PersonP_DisplayName, @dir = @PLDIR, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.P_DisplayName)
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Email, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.Email).HtmlAttributes(new { @class = "form-control txtrequired", @placeholder = lr.PersonContactEmail, @style = " width: 100%;" })
            @Html.ValidationMessageFor(model => model.Email)
            @Html.Hidden("InitialEmail", Model.Email)



        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.MaritalStatus, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().DropDownListFor(c => c.MaritalStatus).DataTextField("Text").DataValueField("Value")
            .OptionLabel(lr.MaritalStatusOptionalLabel)
            // .OptionLabel(new { Text = lr.GenderOptionallabel, Value = 0 })
            .HtmlAttributes(new { @class = "form-control txtrequired ", style = "width:100%" })
            .BindTo(TMS.Extensions.EnumToSelectList<TMS.Library.MaritalStatus>(typeof(TMS.Library.MaritalStatus))))

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DateOfBirth, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().DatePickerFor(x => x.DateOfBirth).Start(CalendarView.Month).Depth(CalendarView.Month).Format(KendoDateFormat).Value("").HtmlAttributes(new { style = "width: 100%;", @class = "txtrequired" }).Max(DateTime.Now.AddYears(-10)).Events(e => e.Change("onDOBChange")))


            @*@(Html.Kendo().DatePickerFor(model => model.DateOfBirth).Start(CalendarView.Month).Depth(CalendarView.Month).Format(KendoDateFormat).Value("").HtmlAttributes(new { style = "width: 100%;padding-bottom: 10px;", @class = "txtrequired" }).Max(DateTime.Now).Events(e => e.Change("onDOBChange")))*@
            @Html.ValidationMessageFor(model => model.DateOfBirth)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NationalIdentity, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().DropDownListFor(m => m.NationalIdentity)
            /// .ValuePrimitive(true)
            .HtmlAttributes(new { style = "width:100%" })
            .DataTextField("Text")
            .DataValueField("Value")
            .OptionLabel(new { Text = lr.NationalityOptionalLabel, Value = 0 })
            .DataSource(dataSource =>
            {
                dataSource.Read(read => read.Action("NationalityCode", "DDL"));

            })
            )
        </div>
    </div>

    @*<div class="form-group" style="margin:0; padding:0px;">
            @Html.LabelFor(model => model.ProfilePicture, new { @class = "col-md-3 col-lg-3 control-label" })
            <div class="col-md-7 col-lg-7 col-sm-11">

                <input id="fileupload" name="fileupload" type="file" />
                @Html.ValidationMessageFor(model => model.ProfilePicture)
            </div>


        </div>*@
    @{ var role = ViewData["RoleID"];}
    @if ((int)personType.Trainer == Convert.ToInt32(role))
    {
        <div class="form-group">
            @Html.LabelFor(model => model.ClientType, new { @class = "col-md-3 col-lg-3 control-label" })
            <div class="col-md-7 col-lg-7 col-sm-11">
                @(Html.Kendo().DropDownListFor(c => c.ClientType).DataTextField("Text").DataValueField("Value")
                .OptionLabel(lr.ClientTypeOptionalLabel)
                //.OptionLabel(new { Text = lr.GenderOptionallabel, Value = 0 })
                .HtmlAttributes(new { @class = "form-control txtrequired ", style = "width:100%" })
                .BindTo(TMS.Extensions.EnumToSelectList<TMS.Library.ClientType>(typeof(TMS.Library.ClientType))))

            </div>
        </div>
    }

    <div class="form-group">
        @Html.LabelFor(model => model.OfficialIdentificationTypeID, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-4 col-lg-3 col-sm-11">
            @(Html.Kendo().DropDownListFor(c => c.OfficialIdentificationTypeID).DataTextField("Text").DataValueField("Value")
                .OptionLabel(lr.OfficialIDTypeOptionalLabel)
                //.OptionLabel(new { Text = lr.GenderOptionallabel, Value = 0 })
                .HtmlAttributes(new { @class = "form-control txtrequired ", style = "width:100%" })
                .BindTo(TMS.Extensions.EnumToSelectList<TMS.Library.IDType>(typeof(TMS.Library.IDType))))

        </div>
        @Html.LabelFor(model => model.OfficialIDNumber, new { @class = "col-sm-1 control-label" })
        <div class="col-md-3 col-lg-3 col-sm-11">
            @(Html.Kendo().TextBoxFor(c => c.OfficialIDNumber).HtmlAttributes(new { @class = "form-control ", style = "width:100%" }))

        </div>
    </div>


  
  


    <div class="form-group">
        <div class="col-md-2 col-lg-2"></div>
        <div class="col-md-3 col-lg-3 col-sm-6" style="margin-left:30px;">
            @Html.Kendo().CheckBoxFor(model => model.IsCoordinator)
        </div>
        @*@{  role = ViewData["RoleID"];}
            @if ((int)personType.Trainer == Convert.ToInt32(role))
            {

                <div class="form-group islogin">
                    <div class="col-md-2 col-lg-2"></div>
               
                    <div class="col-md-7 col-lg-7 col-sm-11" style="margin-left:30px;">


                        @Html.Kendo().CheckBoxFor(model => model.roles.IsLogin)
                    </div>
                </div>
            }*@
    </div>
    <div class="form-group pwd">
        @Html.LabelFor(model => model.roles.Password, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @Html.Kendo().TextBoxFor(model => model.roles.Password).HtmlAttributes(new { @class = "form-control ", @Type = "Password", @style = " width: 100%;" })
        </div>
    </div>
    <div class="form-group country_Code" id="country_Code">
        @Html.LabelFor(model => model.CountryCode, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().DropDownListFor(m => m.CountryCode)

            .HtmlAttributes(new { style = "width:100%" })
            .DataTextField("Text")
            .DataValueField("Value")
             //  .AutoBind(true).SelectedIndex(134)
             .OptionLabel(lr.PersonPhoneCountryCodeOptionalLabel)
            //   .OptionLabel(new { Text = lr.PersonPhoneCountryCodeOptionalLabel, Value = 0 })
            .DataSource(dataSource =>
            {
                dataSource.Read(read => read.Action("CountryCode", "DDL"));
            })
            .Value("134")
            )
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ContactNumber, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().TextBoxFor(c => c.ContactNumber).HtmlAttributes(new { @class = "form-control ", style = "width:100%" }))

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Extension, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().TextBoxFor(c => c.Extension).HtmlAttributes(new { @class = "form-control ", style = "width:100%" }))

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Flags, new { @class = "col-md-3 col-lg-3 control-label" })
        <div class="col-md-7 col-lg-7 col-sm-11">
            @(Html.Kendo().MultiSelectFor(x => x.Flags)
                        .DataTextField("P_FlagName")
                .DataValueField("ID")
                 .Filter("contains")
                 .AutoBind(true)
                 .MaxSelectedItems(6)
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("Flags", "DDL");
              })
              .ServerFiltering(false);
          }))

        </div>
    </div>
</div>

<script>
    jQuery(document).ready(function (e) {
        jQuery('.pfirstname , .pmiddlename , .plast_name, .nickname').bind('keypress blur', function () {
            jQuery('.pdisplayname').val(jQuery('.pfirstname').val() + ' ' +
                                  jQuery('.pmidddlename').val() + ' ' +
                                       jQuery('.plast_name').val() + ', ' +
                                       jQuery('.nickname').val()
                                    ).change();
        });

    });
</script>

<script>
    jQuery(".pwd").hide();
    jQuery(".islogin").hide();

    jQuery(function () {
        jQuery("#IsLogin").click(function () {
            if (jQuery(this).is(':checked')) {
                jQuery(".pwd").show();
            }
            else {
                jQuery(".pwd").hide();
            }
        });

        jQuery("#RoleID").change(function () {
            if (jQuery(this).val()=='2') {
                jQuery(".islogin").show();
            }
            else {
                jQuery(".islogin").hide();
                jQuery(".Password").text("");
            }

        });

    });

</script>
<script>
    jQuery(document).ready(function () {
         jQuery('._leadID').hide();

         jQuery('#rolename').click(function () {
            var checked_status = this.checked;
            if (checked_status == true) {
                jQuery('._leadID').show();
            }
            else {
                jQuery('._leadID').hide();
            }
        });
    });

</script>