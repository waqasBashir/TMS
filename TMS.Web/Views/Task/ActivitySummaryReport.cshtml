@using lr = Resources.Resources
@{
    ViewBag.Title = "ActivitySummaryReport";
    Layout = "~/Views/Shared/_LayoutDashboardNew.cshtml";
}

<h2>@lr.ActivitySummaryReport</h2>

@using lr = Resources.Resources;


<div class="ChildGrid">
    @(Html.Kendo().Grid<TMS.Library.Entities.CRM.ActivitySummeryReport>()
            .Name("ActivitySummaryReport")
      .Columns(columns =>
      {
          columns.Bound(e => e.Name).Title(lr.Name).Width(160);
          columns.Bound(e => e.OutgoingCalls).Title(lr.OutgoingCalls).Width(160);
          columns.Bound(e => e.IncomingCalls).Title(lr.IncomingCalls).Width(160);
          columns.Bound(e => e.DelayedCalls).Title(lr.DelayedCalls).Width(160);
          columns.Bound(e => e.ForwardedCalls).Title(lr.ForwardedCalls).Width(160);
          columns.Bound(e => e.IncomingVisits).Title(lr.IncomingVisits).Width(160);
          columns.Bound(e => e.OutgoingVisits).Title(lr.OutgoingVisits).Width(160);
          columns.Bound(e => e.DelayedVisits).Title(lr.DelayedVisits).Width(160);
          // columns.Bound(e => e.AddedByAlias).ClientTemplate("#=addedbytemplate(data)#").Width(190).MinScreenWidth(550).Title(lr.GridAddedBy);

          //columns.Bound(e => e.UpdatedByAlias).Width(230).Title(lr.ModifiedBy).ClientTemplate(@"<div class='gridupdated'>
          //    <span class='Addedby' >#:UpdatedByAlias#</span>
          //    <span class='date' >#=kendo.toString(ModifiedOn,'" + DateFormatScript + @"')#</span>
          //    <span class='time' >#=kendo.toString(ModifiedOn,'" + TimeFormatScript + @"')#</span>
          //</div>");
          //          columns.Bound(e => e.UpdatedByAlias).Width(170).Title(lr.ModifiedBy).
          //ClientTemplate(@"<div class='gridupdated'> # if (UpdatedByAlias!=null) { #" + @"<span class='Addedby'>#=UpdatedByAlias# </span>
          //    <span class='date' >#=kendo.toString(ModifiedOn,'" + DateFormatScript + @"')#</span>
          //<span class='time' >#=kendo.toString(ModifiedOn,'" + TimeFormatScript + @"')#</span>
          //" + @"#} else {#<div>Not Modified</div> </div>#}#");

      })
        // .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_CourseTemplate").DisplayDeleteConfirmation(false))
        //    .ToolBar(toolbar => toolbar.Template(@<text> @RenderAddTemplate()</text>))
        .Sortable().Selectable(selectable => selectable
        .Mode(GridSelectionMode.Multiple))
        .Pageable(pager => pager.Refresh(true)).Scrollable().Filterable().Events(e => e.Edit("Grid_onEdit").Save("General_onSave"))
        .HtmlAttributes(new { style = "height:350px;" }).DataSource(dataSource => dataSource.Ajax().Model(model => { model.Id(m => m.ID); }).PageSize(5)
         .Read(read => read.Action("ActivitySummaryReport_Read", "Task"))
        //.Create(read => read.Action("ManageCourse_Create", "Task"))
        //  .Update(read => read.Action("CourseUpdate", "Task"))
        //  .Destroy(read => read.Action("Course_Destroy", "Task"))
          .Events(e => e.Error("GeneralErrorHandler(\"ActivitySummaryReport\")").RequestEnd("GridRequestEndUpdate"))).NoRecords(lr.GridNoRecordFoundMessage)

    )

    @*@helper RenderAddTemplate()
    {
    <div class="toolbar">
        @if (User.IsInAnyRoles("CanAddEditCRMCourse"))
        {
            <a class="k-button tms-grid-add"><span class="tms-grid-icon mdi mdi-plus "></span></a>
            <a class="k-button tms-grid-edit"><span class="tms-grid-icon mdi mdi-pencil "></span></a>
        }
        @if (User.IsInAnyRoles("CanDeleteCRMCourse"))
        {
            <a class="k-button tms-grid-destroy"><span class="tms-grid-icon mdi mdi-delete "></span></a>
        }

    </div>

}*@
</div>





