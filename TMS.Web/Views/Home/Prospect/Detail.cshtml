@using lr = Resources.Resources;
@{
    var Model = (TMS.Library.TMS.Persons.Person)ViewData["model"];
    ViewBag.Title = Model.P_DisplayName;
    Layout = "~/Views/Shared/_LayoutDashboardNew.cshtml";
    var phonenubner = lr.PersonPhoneNumber;
    var personEmail = lr.PersonContactEmail;
    var gender = lr.Gender;
    List<TMS.Library.TMS.Persons.Person> modellist = new List<TMS.Library.TMS.Persons.Person>() { Model };
}
@Html.AntiForgeryToken()
<div id="inforecords"></div>
@(Html.Kendo().Grid<TMS.Library.TMS.Persons.Person>(modellist)
    .Name("PersonDetailGrid")
    .Columns(columns =>
    {
        columns.Bound(e => e.P_DisplayName).ClientTemplate("#=PersonTemplate(data)#").HeaderHtmlAttributes(new { @style = "display: none" });
    }).Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_PersonDetailTemplate").DisplayDeleteConfirmation(false))
      .ToolBar(toolbar => toolbar.Template(@<text>@RenderAddTemplate() </text>))
              .Events(e => e.Edit("PersonDetailGrid_onEdit").Save("Grid_onEdit"))
    .DataSource(dataSource => dataSource
    .Ajax().Model(model => { model.Id(m => m.ID); })
    .Read(read => read.Action("Person_Read", "Prospect"))
    .Create(read => read.Action("Person_Create", "Prospect"))//.Data("PersonProfilePictureData"))
    .Destroy(read => read.Action("Person_Destroy", "Prospect"))
        .Update(read => read.Action("Person_Update", "Prospect"))//.Data("PersonProfilePictureData"))
                  .Events(e => e.Error("GeneralErrorHandler(\"PersonDetailGrid\")")))
    .NoRecords(lr.GridNoRecordFoundMessage)
)
@helper RenderAddTemplate()
{
    <div class="toolbar">
        @*<a class="k-button tms-grid-add-main"><span class="tms-grid-icon mdi mdi-plus "></span></a>*@
        <a class="k-button tms-grid-edit-main"><span class="tms-grid-icon mdi mdi-pencil "></span></a>
        <a class="k-button tms-grid-destroy-main "><span class="tms-grid-icon mdi mdi-delete "></span></a>
        <a class="k-button tms-grid-exitapp-main"><span class="tms-grid-icon mdi mdi-exit-to-app "></span></a>
        <a class="k-button tms-grid-phone-main"><span class="tms-grid-icon mdi mdi-phone-settings "></span></a>
        <a class="k-button tms-grid-pdf-main"><span class="tms-grid-icon mdi mdi-file-pdf "></span></a>
        <a class="k-button tms-grid-word-main"><span class="tms-grid-icon mdi mdi-file-word "></span></a>
    </div>
}
<script id="PersonTemplate" type="text/kendo">
    <div class='person-box'>
        <div class='person'>
            @*<img src='../#:data.ProfilePicture#' class='paddig' alt=''>*@
            <h2>#:data.P_DisplayName# # if (data.NickName!=null){ #(#:data.NickName#)  #}#</h2>
            #if(data.Designation !=null){#<h3>#:data.Designation#</h3> #}#
            # if (data.Email!=null) { # <h3> #:data.Email#</h3> #}#
            #if(data.ContactNumber!=null){#<h3> #:data.ContactNumber#</h3> #}#
            #if(data.Gender!=0){#<h5>#:data.GenderValue#</h5> #}#

        </div>
    </div>
</script>

<script type="text/javascript">
    function PersonTemplate(data) {
        if (data != null) {
            var personTemplate = kendo.template(jQuery("#PersonTemplate").html(), { useWithBlock: false });
            return personTemplate(data);
        }
        return '';
    }
</script>

<script type="text/javascript">
    jQuery(function () {
        jQuery(".tms-grid-add-main").live("mousedown", function (event) {
            jQuery("#PersonGrid").data("kendoGrid").addRow();
        });

        //destroy from header
        jQuery(".tms-grid-destroy-main").live("mousedown", function (event) {
            grid = jQuery("#PersonDetailGrid").data("kendoGrid");
            var selectedrow = jQuery("#PersonDetailGrid tr:nth(1)");

            swal({
                title: '@lr.Areyousureyouwanttodeletethisrecord',
                text: '@lr.Youwillnotbeabletorecover',
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "@lr.confirmDelete",
                cancelButtonText: "@lr.confirmNo",
                closeOnConfirm: false,
                closeOnCancel: true,
                customClass:"tmsconfirm"
            },
               function(isConfirm){
                   if (isConfirm) {
                       jQuery("#PersonDetailGrid").data("kendoGrid").removeRow(selectedrow);
                       swal({
                           title: '@lr.confirmDeleted',
                           text:  '@lr.confirmDeletedMessage',
                           type: "success"
                       },
                    function(){
                        window.location="@Url.Content("~/People/Person")";
                    });
                   }
               });
        });


    //edit from header
    jQuery(".tms-grid-edit-main").live("mousedown", function (event) {
        jQuery("#PersonDetailGrid").data("kendoGrid").editRow(jQuery("#PersonDetailGrid tr:nth(1)"));
    });
    });

    function onExpand(e) {
        jQuery('html, body').animate({
            scrollTop:  e.item.offsetTop
        }, 1500);
    }
</script>


@(Html.Kendo().PanelBar()
        .Name("PersonDetailGridChildtemplate" + Model.ID)
    .ExpandMode(PanelBarExpandMode.Multiple)
    .Items(i =>
    {
        if (User.IsInRole("CanViewPersonEmail"))
        {
            i.Add().Text(lr.EmailTabTitle).LoadContentFrom("EmailAddress", "Contact", new { PersonID = Model.ID });
        }
        if (User.IsInRole("CanViewPersonPhone"))
        {
            i.Add().Text(lr.PhoneTabTitle).LoadContentFrom("PersonPhone", "Contact", new { PersonID = Model.ID });
        }
        //i.Add().Text(lr.AddressTabTitle).LoadContentFrom("PrimaryAddress", "Contact", new { PersonID = Model.ID });
        //i.Add().Text(lr.LinkTabTitle).LoadContentFrom("PersonLinks", "Contact", new { PersonID = Model.ID });
        //i.Add().Text(lr.PersonDegreeTabTitle).LoadContentFrom("Degree", "PersonEducation", new { PersonID = Model.ID });
        //i.Add().Text(lr.PersonCertificationTabTitle).LoadContentFrom("Certification", "PersonEducation", new { PersonID = Model.ID });
        //i.Add().Text(lr.PersonWorkExperienceTabTitle).LoadContentFrom("WorkExperience", "PersonEducation", new { PersonID = Model.ID });
        //i.Add().Text(lr.PersonTrainingDeliveredTabTitle).LoadContentFrom("TrainingDelivered", "PersonEducation", new { PersonID = Model.ID });
        //i.Add().Text(lr.PersonSkillAreasofFocusTabTitle).LoadContentFrom("PersonSkill", "SkillInterest", new { PersonID = Model.ID });
        if (User.IsInRole("CanViewScheduleClassess"))
        {
            i.Add().Text(lr.ScheduledClassesTabTitle).LoadContentFrom("ScheduledClasses", "Prospect", new { PersonID = Model.ID });

        }
        if (User.IsInRole("CanViewProposedCourses"))
        {
            i.Add().Text(lr.ProposedCoursesTabTitle).LoadContentFrom("ProposedCourses", "Prospect", new { PersonID = Model.ID });

        }
        if (User.IsInRole("CanViewCourseCategory"))
        {
            i.Add().Text(lr.CourseCategoriesTabTitle).LoadContentFrom("CourseCategory", "Prospect", new { PersonID = Model.ID });

        }
        if (User.IsInRole("CanViewAssignedTo"))
        {
            i.Add().Text(lr.AssignedToTabTitle).LoadContentFrom("AssignedTo", "Prospect", new { PersonID = Model.ID });

        }
        if (User.IsInRole("CanViewHowHeard"))
        {
            i.Add().Text(lr.HowHeardTabTitle).LoadContentFrom("HowHeard", "Prospect", new { PersonID = Model.ID });

        }
        if (User.IsInRole("CanViewRecordCall"))
        {
            i.Add().Text(lr.CallVisit).LoadContentFrom("RecordCall", "Prospect", new { PersonID = Model.ID });

        }
        if (User.IsInRole("CanViewRecordVisit"))
        {
            i.Add().Text(lr.VisitHistory).LoadContentFrom("RecordVisit", "Prospect", new { PersonID = Model.ID });

        }
        if (User.IsInRole("CanViewAssigmentHistory"))
        {
            i.Add().Text(lr.AssigmentHistory).LoadContentFrom("AssigmentHistory", "Prospect", new { PersonID = Model.ID });

        }
        if (User.IsInRole("CanViewEnrolmentHistory"))
        {
            i.Add().Text("Enrolment History").LoadContentFrom("EnrolmentHistory", "Prospect", new { PersonID = Model.ID });

        }


        if (User.IsInRole("CanViewPersonRoles"))
        {
            i.Add().Text(lr.RolesTabTitile).LoadContentFrom("ManageRoles", "People", new { PersonID = Model.ID });
        }
        //if (User.IsInAnyRoles("CanViewPersonAchievement", "CanViewPersonSuggestedTraining", "CanViewPersonRelation", "CanViewPersonAttachments", "CanViewPersonNotes"))
        //{
        //    i.Add().Text(lr.OthersTabTitle).LoadContentFrom("Others", "People", new { pid = Model.ID });
        //}

    }).Events(e => e.Expand("onExpand")))

<script>
    var tms = tms || {};
    (function ($) {

        tms.person = tms.person || {};

        tms.person.salutation = {
            Not_Specified: 0,
            Salutation_Mr: 1,
            Salutation_Mrs: 2,
            Salutation_Ms: 3,
            Salutation_Dr: 4
        };

        tms.person.gender = {
            Not_Specified: 0,
            Gender_Male: 1,
            Gender_Female: 2
        };
        tms.person.maritialStatus = {
            Not_Specified: 0,
            MaritialStatus_Single: 1,
            MaritialStatus_Married: 2
        };

    })(jQuery);

    var PicturelastUploadedFile; var personProfile_aid=0;var personattachmentname = null;
    var person_parentFoldername=null
    function PersonPictureOnSuccess(e) {
        //debugger;
        //PicturelastUploadedFile = e.response.filename;
        var item = jQuery("#PersonDetailGrid").data("kendoGrid").dataItem(jQuery("#PersonDetailGrid tr:nth(1)"));
        item.dirty = true;

        PicturelastUploadedFile = e.response.parentFoldername;
        personProfile_aid = e.response.aid;
        person_parentFoldername=e.response.parentFoldername;
    }
    function PersonPictureOnRemove(e) {
        e.data= {
            parentFoldername: person_parentFoldername,
            oid:@Model.ID ,
            Opentype: 1,
            aid:personProfile_aid
        }
    }
    function profile_UploadAttachmentData(e) {
        e.data = { oid:@Model.ID,otype:1 ,fileType:12};
    }
    function person_AttachmentSelect(e) {
        var filename = e.files[0].name;
        var dropvalue = checkfiletypeOrganizationlogo(e.files[0].extension.toLowerCase());
        if (dropvalue == "-1") {
            e.preventDefault();
        } else {
            personattachmentname = filename;
        }
    }

    function LoginUserProfilePictureSelect(e) {
        var filename = e.files[0].name;
        var dropvalue = checkfiletypeUserProfilePicture(e.files[0].extension.toLowerCase());
        if (dropvalue == "-1") {
            e.preventDefault();
        } else {

        }
    }
    function checkfiletypeUserProfilePicture(filetype) {
        switch (filetype) {
            case ".jpg": case ".jpeg": case ".bmp": case ".png":
                return "1";
            default:
                return "-1";
                break;
        }
    }










    function checkfiletypeOrganizationlogo(filetype) {
        switch (filetype) {
            case ".jpg": case ".jpeg": case ".bmp": case ".png":
                return "1";
            default:
                return "-1";
                break;
        }
    }
    var AttachmentlastUploadedFileArr = [];
    function PersononAttachmentOnSuccess(e) {
        var person = { uid: e.files[0].uid, name: e.response.filename, id: e.response.id };
        AttachmentlastUploadedFileArr.push(person);
    }
    function PersonCreateAttachmentInfoData() {
        return {
            picturename: PicturelastUploadedFile,
            attachmentname: AttachmentlastUploadedFileArr
        }
    }
    function PersonProfilePictureData () {
        return {
            filename: PicturelastUploadedFile,
          aid:  personProfile_aid
        }
    }

    function PersonAttachmentsRemove(e) {
        var findthiselem = jQuery.grep(AttachmentlastUploadedFileArr, function (v) {
            return v.uid == e.files[0].uid;
        });
        var idvalue = findthiselem[0].id.toString()
        AttachmentlastUploadedFileArr = jQuery.grep(AttachmentlastUploadedFileArr, function (v) {
            return v.uid != e.files[0].uid;
        });
        e.data = {
            file: idvalue
        }
    }

    function SalutationChange(e) {
        var dataItem = this.dataItem(e.item);
        var salutation = parseInt(dataItem.Value);
        var dropdownlist = jQuery("#Gender").data("kendoDropDownList");

        switch (salutation) {
            case tms.person.salutation.Salutation_Mr:
                dropdownlist.value("1"); dropdownlist.trigger("change");
                break;
            case tms.person.salutation.Salutation_Mrs:
                dropdownlist.value("2"); dropdownlist.trigger("change");
                break;
            case tms.person.salutation.Salutation_Ms:
                dropdownlist.value("2"); dropdownlist.trigger("change");
                break;
            case tms.person.salutation.Salutation_Dr:
                dropdownlist.value("0"); dropdownlist.trigger("change");
                break;
            default:
                return true;
        }
    };
</script>
<script>

    function PersonDetailGrid_onEdit(e) {
        var title = jQuery(e.container).parent().find(".k-window-title");
        var update = jQuery(e.container).parent().find(".k-grid-update");
        var cancel = jQuery(e.container).parent().find(".k-grid-cancel");
        jQuery(cancel).html('<span class="k-icon k-i-cancel"></span>' + lr.CencelRecordGeneralButton);
        if (e.model.isNew()) {
            // add
            jQuery("#personeditdiv").hide();
            jQuery(title).text(lr.AddRecordGeneralTitle);
            jQuery(update).html('<span class="k-icon k-i-check"></span>' + lr.SaveRecordGeneralButton);

        } else {
            // edit
            jQuery("#personeditdiv").show();
            jQuery(title).text(lr.EditRecordGeneralTitle);
            jQuery(update).html('<span class="k-icon k-i-check"></span>' + lr.UpdateRecordGeneralButton);
        }
        PicturelastUploadedFile = null;
    }

    function getUrlVars() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    }
</script>
@(Html.Kendo().Grid<TMS.Library.TMS.Persons.Person>()
 .Name("PersonGrid")
 .Columns(columns => { columns.Bound(e => e.P_DisplayName); }).Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_PersonTemplate"))
 .Events(e => e.Edit("PersonGrid_onEdit").Save("Person_onSave"))
 .HtmlAttributes(new { style = "display:none" })
 .DataSource(dataSource => dataSource
 .Ajax().Model(model => { model.Id(m => m.ID); })
 .Create(read => read.Action("Person_Create", "People"))
     .Events(e => e.Error("GeneralErrorHandler(\"PersonGrid\")").RequestEnd("requestendpersongrid")))
)
<script type="text/x-kendo-template" id="showrecordinserted">
    <div class="alert alert-success">
        <button data-dismiss="alert" class="close" type="button">×</button>
        @lr.PersonRecordAddedSuccessfully<strong><a target="_blank" href="@Url.Content("~/People/Detail?pid=")#=data.ID#"> #=data.P_DisplayName#</a></strong>
    </div>
</script>
<script>
    function requestendpersongrid(e) {
        if (e.type == "create") {
            if(e.response.Data[0].ID!=0){
                showaddedperson();
            }
        }
    }
    function showaddedperson() {
        setTimeout(function () {
            var showrecordinserted = kendo.template(jQuery("#showrecordinserted").html());
            grid = jQuery("#PersonGrid").data("kendoGrid");
            var selectedrow = jQuery("#PersonDetailGrid tr:nth(1)");
            var data = grid.dataItem(selectedrow);
            var recordaddedrow = showrecordinserted(data);
            jQuery("#inforecords").append(recordaddedrow);
        }, 50);
    }
</script>

<div id="inforecords"></div>
<style>
    .person-box {
        color: #0c4e6f;
    }

    #PersonDetailGrid > table tr:first-child td {
        background: #e2f4fd;
    }

    #inforecords .alert-success {
        padding: 5px 5px 5px 15px;
        font-size: 13px;
        margin-bottom: 3px;
    }
</style>



@section Scripts
{
    <script src="@Url.Content("~/Views/People/Person.js")"></script>
}

@*<div class="form-group" style="margin:0; padding:0px;">
            <div class="col-md-6 col-lg-6 col-sm-12" style="padding:0px;">
                <div class="form-group" style="margin:0; padding:0px;">
                    @Html.LabelFor(model => model.PictureID, new { @class = "col-md-3 col-lg-3 control-label" })
                    <div class="col-md-7 col-lg-7 col-sm-11">
                        <div class="input-group">
                            @(Html.Kendo().Upload().Name("PictureID").Multiple(false).Async(a => a.Save("PersonSavePicture", "Attachment").Remove("PersonRemoveAttachment", "Attachment").
                                 AutoUpload(true)).Events(e => e.Success("PersonPictureOnSuccess").Remove(@<text>function(e) {e.data = { file: PicturelastUploadedFile }; } </text>)
                                            ))
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-6 col-sm-12" style="padding:0px;">
                <div class="form-group" style="margin:0; padding:0px;">
                    @Html.LabelFor(model => model.AttachmenttID, new { @class = "col-md-3 col-lg-3 control-label" })
                    <div class="col-md-7 col-lg-7 col-sm-11">
                        <div class="input-group">
                            @(Html.Kendo().Upload().Name("AttachmenttID").Multiple(true).Async(a => a.Save("PersonSaveAttachment", "Attachment").Remove("PersonRemoveAttachment", "Attachment").
                                                 AutoUpload(false)).Events(e => e.Success("PersononAttachmentOnSuccess").Remove("PersonAttachmentsRemove")
                                                ))
                        </div>
                    </div>
                </div>
            </div>
        </div>

             <div class="col-md-6 col-lg-6 col-sm-12" style="padding:0px;">
                    <div class="form-group" style="margin:0; padding:0px;">
                        @Html.LabelFor(model => model.OrganizationID, new { @class = "col-md-3 col-lg-3 control-label" })
                        <div class="col-md-7 col-lg-7 col-sm-11">
                            <div class="input-group">
                                Html.Kendo().DropDownListFor(model => model.UserID).DataTextField("Text").DataValueField("Value").DataSource(source => { source.Read(read => { read.Action("Orgnization", "DDL"); }).ServerFiltering(false); }).HtmlAttributes(new { style = "width:100%; " }).OptionLabel(lr.OrganizationSelectLabelOptional)
    (Html.Kendo().DropDownListFor(model => model.OrganizationID)
        .HtmlAttributes(new { style = "width:100%" })
        .DataTextField("Text")
                .DataValueField("Value")
        .OptionLabel(new { Text = lr.OrganizationSelectLabelOptional, Value = 0 })
         .DataSource(source =>
         {
             source.Read(read =>
             {
                 read.Action("Orgnization", "DDL");
             });
         })
    )
                        </div>
                    </div>
                </div>
            </div>

                    //deletewindow.content(deletewindowTemplate(data)); //send the row data object to the template and render it
                //deletewindow.center().open();
                //jQuery("#yesButton").click(function () {
                //    grid.removeRow(selectedRows);
                //    deletewindow.close();
                //});
                //jQuery("#noButton").click(function () {
                //    deletewindow.close();
                //});

                    // var data = { Length: checkedLength }
                //deletewindow.content(deletewindowTemplateMultiple(data)); //send the row data object to the template and render it
                //deletewindow.center().open();
                //jQuery("#yesButton").click(function () {
                //    selectedRows.each(function () { grid.removeRow(jQuery(this)); });
                //    deletewindow.close();
                //})
                //jQuery("#noButton").click(function () {
                //    deletewindow.close();
                //});

*@