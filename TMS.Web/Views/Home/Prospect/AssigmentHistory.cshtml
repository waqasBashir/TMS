
@model long

@using lr = Resources.Resources;

<script>
    function CreateVenueAdditionalData() {
        return {
            oid: '@Model'
        }
    }
</script>
<div class="ChildGrid">
    @(Html.Kendo().Grid<TMS.Library.Entities.CRM.CRM_ProspectHistory>()
            .Name("AssigmentHistory" + Model)
      .Columns(columns =>
      {
          columns.Bound(e => e.AssignedBy).Title("Assigned By");
          columns.Bound(e => e.AssignedTo).Title("Assigned To");
          columns.Bound(e => e.AssignmentDate).Format("{0: dd/MM/yyyy}").Title("Assignment Date");
          //  columns.Bound(e => e.AddedByAlias).ClientTemplate("#=addedbytemplate(data)#").Width(190).Title(lr.GridAddedBy);

          columns.Bound(e => e.AddedByAlias).Width(190).Title(lr.GridAddedBy).ClientTemplate(@"<div class='gridupdated'>
            <span class='Addedby' >#:AddedByAlias#</span>
            <span class='date' >#=kendo.toString(CreatedOn,'" + DateFormatScript + @"')#</span>
            <span class='time' >#=kendo.toString(CreatedOn,'" + TimeFormatScript + @"')#</span>
        </div>");
          //  columns.Bound(e => e.UpdatedByAlias).Width(230).Title(lr.ModifiedBy).ClientTemplate(@"<div class='gridupdated'>
          //    <span class='Addedby' >#:UpdatedByAlias#</span>
          //    <span class='date' >#=kendo.toString(UpdatedOn,'" + DateFormatScript + @"')#</span>
          //    <span class='time' >#=kendo.toString(UpdatedOn,'" + TimeFormatScript + @"')#</span>
          //</div>");
      }).ToolBar(toolbar => toolbar.Template(@<text> @RenderAddTemplate()</text>))
        .Sortable().Selectable(selectable => selectable
        .Mode(GridSelectionMode.Multiple))
        .Pageable(pager => pager.Refresh(true)).Scrollable().Filterable().Events(e => e.Edit("Grid_onEdit").Save("General_onSave"))
        .HtmlAttributes(new { style = "height:350px;" }).DataSource(dataSource => dataSource.Ajax().Model(model => { model.Id(m => m.ID); }).PageSize(8)
        .Read(read => read.Action("AssigmentHistory_Read", "Prospect", new { PersonID = Model }))
        //.Create(read => read.Action("ManageHowHeard_Create", "Prospect").Data("CreateVenueAdditionalData"))
        //.Update(read => read.Action("ManageHowHeard_Update", "Prospect"))
        //.Destroy(read => read.Action("ManageHowHeard_Destroy", "Prospect"))
        .Events(e => e.Error("GeneralErrorHandler(\"AssigmentHistory" + Model + "\")").RequestEnd("GridRequestEndUpdate"))
                        ).NoRecords(lr.GridNoRecordFoundMessage)
    )

    @helper RenderAddTemplate()
    {
    @*<div class="toolbar">
        @if (User.IsInAnyRoles("CanAddEditPrgramVenues"))
        {
            <a class="k-button tms-grid-add"><span class="tms-grid-icon mdi mdi-plus "></span></a>
            <a class="k-button tms-grid-edit"><span class="tms-grid-icon mdi mdi-pencil "></span></a>
        }
        @if (User.IsInAnyRoles("CanDeletePrgramVenues"))
        {
            <a class="k-button tms-grid-destroy"><span class="tms-grid-icon mdi mdi-delete "></span></a>
        }

    </div>*@

}
</div>
