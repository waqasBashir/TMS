@model string
@using lr = Resources.Resources;

<div class="ChildGrid">
    @(Html.Kendo().Grid<TMS.Library.TMS.Persons.Education.PersonSuggestedTrainings>()
                            .Name("PersonSuggestedTrainingsGrid" + Model)
      .Columns(columns =>
     {
         columns.Bound(e => e.TrainingP_Title);
         columns.Bound(e => e.LearningObjective).MinScreenWidth(550);
         columns.Bound(e => e.CourseOutline).Format(KendoDateFormat).MinScreenWidth(550);
         columns.Command(cmd =>
         { cmd.Edit(); cmd.Destroy(); }).Title("Edit/Delete")
                      .Width(100);
     }).Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_SuggestedTrainingsTemplate").DisplayDeleteConfirmation(false))
                    .ToolBar(toolbar => toolbar.Template(@<text>
        <div class="toolbar">
            @if (User.IsInRole("CanAddEditPersonSuggestedTraining"))
            { <a class="k-button tms-grid-add"><span class="tms-grid-icon mdi mdi-plus "></span></a>
            <a class="k-button tms-grid-edit"><span class="tms-grid-icon mdi mdi-pencil "></span></a>}
            @if (User.IsInRole("CanDeletePersonSuggestedTraining")) {  <a class="k-button tms-grid-destroy"><span class="tms-grid-icon mdi mdi-delete "></span></a>}
        </div>
                    </text>))
                              .Sortable().Selectable(selectable => selectable
                                                                    .Mode(GridSelectionMode.Multiple))
                  .Pageable(pager => pager
               .Refresh(true))
             .Scrollable().Filterable()
                                             .Events(e => e.Edit("Grid_onEdit").Save("General_onSave"))
            .HtmlAttributes(new { style = "height:350px;" })
                .DataSource(dataSource => dataSource
                      .Ajax()
                           .Model(model =>
                           {
                               model.Id(m => m.ID);

                           })

                 .PageSize(5)
                                                                .Read(read => read.Action("PersonSuggestedTraining_Read", "PersonEducation", new { PersonID = Model }))
                                                                 .Create(read => read.Action("PersonSuggestedTraining_Create", "PersonEducation", new { pid = Model }))
                                                                 .Update(read => read.Action("PersonSuggestedTraining_Update", "PersonEducation"))
                                                                 .Destroy(read => read.Action("PersonSuggestedTraining_Destroy", "PersonEducation"))
                                                                                                             .Events(e => e.Error("GeneralErrorHandler(\"PersonSuggestedTrainingsGrid" + Model + "\")").RequestEnd("GridRequestEndUpdate"))
            ).NoRecords(lr.GridNoRecordFoundMessage)
    )
</div>



