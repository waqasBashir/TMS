@model string
@using lr = Resources.Resources;
@{
    List<TMS.DDlList> data = TMS.Extensions.EnumToSelectList<TMS.Library.DegreeStatus>(typeof(TMS.Library.DegreeStatus)).ToList();
}
<div class="ChildGrid">
    @(Html.Kendo().Grid<TMS.Library.TMS.Education.PersonDegrees>()
    .Name("PersonEducationDegreeGrid" + Model)
      .Columns(columns =>
     {
         columns.Bound(e => e.P_Title);
         columns.Bound(e => e.University).MinScreenWidth(550);
         columns.ForeignKey(c => c.DegreeStatus, data, "Value", "Text").MinScreenWidth(550);
         columns.Bound(e => e.Duration).Format(KendoDateFormat).MinScreenWidth(550);
         columns.Bound(e => e.Major).MinScreenWidth(550);
         columns.Command(cmd =>
         { cmd.Edit(); cmd.Destroy(); }).Title("Edit/Delete")
                      .Width(100);
     }).Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_DegreeTemplate").DisplayDeleteConfirmation(false))
                    .ToolBar(toolbar => toolbar.Template(@<text>
        <div class="toolbar">
            @if (User.IsInRole("CanAddEditPersonEducation")) { <a class="k-button tms-grid-add"><span class="tms-grid-icon mdi mdi-plus "></span></a>
            <a class="k-button tms-grid-edit"><span class="tms-grid-icon mdi mdi-pencil "></span></a>}
            @if (User.IsInRole("CanDeletePersonEducation"))
            {<a class="k-button tms-grid-destroy"><span class="tms-grid-icon mdi mdi-delete "></span></a> }
            
        </div>
                    </text>))
             .Sortable().Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
             .Pageable(pager => pager.Refresh(true)).Scrollable().Filterable()
                                             .Events(e => e.Edit("Grid_onEdit").Save("General_onSave"))
             .HtmlAttributes(new { style = "height:350px;" })
              .DataSource(dataSource => dataSource.Ajax().Model(model => { model.Id(m => m.ID); model.Field("DegreeStatus", typeof(string)); }).PageSize(5)
            .Read(read => read.Action("PersonDegree_Read", "PersonEducation", new { PersonID = Model }))
            .Create(read => read.Action("PersonDegree_Create", "PersonEducation", new { pid = Model }))
            .Update(read => read.Action("PersonDegree_Update", "PersonEducation"))
            .Destroy(read => read.Action("PersonDegree_Destroy", "PersonEducation"))
                                            .Events(e => e.Error("GeneralErrorHandler(\"PersonEducationDegreeGrid" + Model + "\")").RequestEnd("GridRequestEndUpdate"))).NoRecords(lr.GridNoRecordFoundMessage)

    )
</div>
<script>
    function OnChangeSessionDuration() {
        var durationYear = parseInt(jQuery("#Duration").data("kendoDropDownList").value());
        var sessionYear = parseInt(jQuery("#Session").data("kendoDropDownList").value());
        var DegreeCompletionYear = durationYear + sessionYear;
        var dt = new Date(); var currentYear = parseInt(dt.getFullYear());
        if (durationYear != NaN || sessionYear != NaN) {
            if (DegreeCompletionYear > currentYear) {
                jQuery("#DegreenIncomplete").prop("checked", true).change();
                jQuery(":radio[name='DegreeStatus']").attr("disabled", true);
            } else {

                jQuery("#Degreencomplete").prop("checked", true).change();
                jQuery(":radio[name='DegreeStatus']").attr("disabled", false);
            }
        }
    }
</script>
